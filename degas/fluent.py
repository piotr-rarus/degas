from austen import Logger


class FluentImage():
    """
    Fluent interface support for image functions from cv2/skimage/etc.
    Enables method chaining. Assumes that these operators are
    immutable and accept image as first parameter.
    Subsequent changes won't affect the source image.

    Parameters
    ----------
    image : ndarray
        Base image.
    logger : Logger
        Current instance of the austen's telemetry logger.
    scope : str, optional
        Name of the scope. Logs, generated by this fluent image, will
        later appear in their own subsection, denoted by scope's name.
    inter_save : bool, optional
        Indicates whether to dump intermediary results.
    """

    def __init__(
        self,
        image,
        logger: Logger = None,
        scope='',
        inter_save=True
    ):

        self.image = image.copy()
        self.inter_save = inter_save

        if logger and scope:
            self.logger = logger.get_child(scope)
        else:
            self.logger = logger

        if self.logger and self.inter_save:
            self.logger.save_image(self.image, 'src', prefix_step=True)

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if self.logger:
            self.logger.close()

    def __rshift__(self, op):
        """
        Applies op to the image.
        Func is logged by Logger.
        Intermediary result will be dumped as well.
        instance.

        Parameters
        ----------
        op : tuple(func, params={})

        Returns
        -------
        FluentImage
            Current instance of FluentImage. Internal image will be
            substituted with function call result.
        """

        func = None
        params = {}

        if type(op) is tuple and len(op) == 2:
            func, params = op
        elif callable(op):
            func = op

        if self.logger:
            self.image = self.logger.log_func(func, [self.image], params)
        else:
            self.image = func(self.image, **params)

        if self.logger and self.inter_save:
            self.logger.save_image(
                self.image,
                func.__name__,
                prefix_step=True
            )

        return self
